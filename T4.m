%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Projeto de filtro e sintese de voz%% %% a. projetar um filtro digital de fc = 1000Hz e aplicar ao sinal gaita.wav mesmo grafico.%%  1. Fazer código para N = 5%%  2. Lei de Formação: o que muda de N = 3 para N = 5 e é regular%%  3. Autômato: MediaMovel(N) --> indica todos os resultados feitos.%%%%%%  11 de junho de 2021%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparacao do codigo %% %% Boas praticas: limpeza de variaveis; variaveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variaveis%%% Pacote de controlepkg load control         %%% Polos e zeros pkg load signal          %%% --> Bilinear%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Sinal: calibracao e sinal real%%%% trabalhar com um sinal amostrado%% %% trabalhar com um sinal real - gaita - harmonica [gk,fs] = audioread ('gaita.wav');      % transformei um arquivo .wav em um vetor g(k)  fmax = fs/2; Ng = length(gk); T = 1/fs;  tempo = linspace(0,Ng*T,Ng); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Analise da resposta em frequencia da media movel%%%% y(k)       = (1/3) * [g(k) + g(k-1) + g(k-2)]%%%% Y(z)/G(z) = (1/3) * [1 + z^(-1) + z^(-2)]%%%% z = e^(jwT)%%% Ganho em frequencia da media movel - substituindo%%% Amostragem - TN = input("digite: ")T = 1/fs;%%% vetor de frequenciasNp = Ng;w = linspace(-pi*fs,pi*fs,Np);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  4 - Automatizando H(z)%%%% LEI DE FORMAÇÃO: Ao variar de N = 3 para N = 5 foi possivel observar%% o surgimento de novos harmonicos, o que gerou um visivel aumento %% dos pontos nulos.%%%%  Dado o N = 3: %%  H(z) = 1/3 * [z^(0) + z^(-1) + z^(-2)]%%%%  Dado o N = 5: %%  H(z) = 1/5 * [z^(0) + z^(-1) + z^(-2) + z^(-3) + z^(-4)]%%%%  Portanto, dado um valor de N:%%%%  H(z) = 1/N * ( sum{i=0}^{N-1} z^i / z^{N-1} )%%%%  Como, z = e^(jwT):%%%%      H(w) = 1/N * sum{i=0}^{N-1} (e^(-jwT))^i%%%%function Hw  =  RFrequencia(N,fs,Np,T)    %%% Cria N-1 pontos com espacamento de 1    n = [0:1:N-1];    %%% cria o vetor frequencia w    w = linspace(-pi*fs,pi*fs,Np);    %%% inicio da somatoria    aux = 0;    %%% calculo da somatoria    for k = 1 : N      aux = aux + exp(-j*w*T).^n(k);    end    %%% fator  multiplicativo    Hw = aux *(1/N);  endfunctionGanhoMediaMovel = RFrequencia(N,fs,Np,T);%%% Visualizar% GanhoMediaMovel  = Hw;ModuloMediaMovel = abs(GanhoMediaMovel);FaseMediaMovel = angle(GanhoMediaMovel);figure(1)subplot(2,1,1); plot(w/(2*pi),ModuloMediaMovel);xlabel('Frequencia em Hz') ylabel('Modulo')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(w/(2*pi),FaseMediaMovel);xlabel('Frequencia em Hz') ylabel('Fase')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Conclusoes% 1 trata-se de um filtro passa baixas% 2 tem dois nulos% 3 tem fase linear%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Aplicando o filtro ao sinal da gaita%%##     An equivalent form of the equation is:####                    N                   M##          y(n) = - SUM c(k+1) y(n-k) + SUM d(k+1) x(n-k)  for 1<=n<=length(x)##                   k=1                 k=0####     where c = a/a(1) and d = b/a(1).### Funcao de transferenciaNd = [];for i=1:N    Nd(end+1) = 1/N;endDd = [1];for i=1:N-1    Dd(end+1) = 0;endGanhoFiltroMediaMovel = tf(Nd,Dd,T)yMediaMovel = filter (Nd, Dd, gk);%%% Visualizando no tempofigure(2)subplot(2,1,1); plot(tempo,gk)xlabel('tempo em segundos')title('Entrada')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(tempo,yMediaMovel)xlabel('tempo em segundos')title('Saida')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Visualizando na frequenciaGkF = fft(gk);GkF = fftshift(GkF);figure(3)subplot(2,1,1); plot(w/(2*pi),ModuloMediaMovel);xlabel('Frequencia em Hz') ylabel('Modulo')axis ([-2000 +2000])set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(w/(2*pi),GkF);xlabel('Frequencia em Hz') ylabel('Modulo')axis ([-2000 +2000])set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 6 - Criando o sinal artificial%%%%  g1[k] = cos(w1*tempo) e w1 --> ao zero da FT%%%%% determinando os zeros do ganhozeros = roots(Nd);ModuloZeros = abs(zeros);FaseZeros = angle(zeros);%%  2pi          - ws%%  ThetaZero1   - w1%%% frequencia angular do zero pela teoriaws = 2*pi*fs;w1 = FaseZeros(1)*ws/(2*pi);%% 14700Hzf1 = w1/(2*pi);%%% gerando o sinal gk1 - A * sin(wt + angulo)gk1 = 1 * sin(w1*tempo + 0);%%% Aplicando o filtroyMediaMovel1 = filter (Nd, Dd, gk1);%%% Visualizando no tempofigure(4)subplot(2,1,1); plot(tempo,gk1)xlabel('tempo em segundos')title('Entrada')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);axis ([0 1])subplot(2,1,2); plot(tempo,yMediaMovel1)xlabel('tempo em segundos')title('Saida')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);axis ([0 1])%%% Visualizacao do zero na frequenciaGkF1 = fft(gk1);GkF1 = fftshift(GkF1);figure(5)subplot(2,1,1); plot(w/(2*pi),ModuloMediaMovel);xlabel('Frequencia em Hz') ylabel('Modulo')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(w/(2*pi),GkF1);xlabel('Frequencia em Hz') ylabel('Modulo')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);